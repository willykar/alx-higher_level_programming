Integer addition module
=======================

Import module:
=============
	>>> add_integer = __import__('0-add_integer').add_integer

The function adds 2 integers

Operation:
=========
Arguments 'a' and 'b' must be integers or floats, otherwise raise a TypeError exception with the message 'a must be an integer' or 'b must be an integer

No parameters provided
======================

Test case #0: Test case without parameters

	>>> add_integer()
	Traceback (most recent call last):
	TypeError: add_integer() missing 1 required positional argument: 'a'

Test case #1: Test case for an argument with no assigned value

	>>> add_integer(a, 50)
	Traceback (most recent call last):
	NameError: name 'a' is not defined

Test case #2: Test case for using the default value of the parameter 'b'

	>>> add_integer(2)
	100

Test case #3: Test case for using the default value of parameter 'b' with the float parameter 'a'

	>>> add_integer(1.0, )
	99

Test case #4: Test case between two integers

	>>> add_integer(1, 5)
	6

Test case #5: Test case between integer and float

	>>> add_integer(10, 5.0)
	15

Test case #6: Test case between two floats

	>>> add_integer(5.0, 5.0)
	10

Test case #7: Test case between float and integer

	>>> add_integer(10.0, 2)
	12

Test case #8: Test case between two negative floats

	>>> add_integer(-6.5, -6)
	12

Test case #9: Test case between float and negative integer

	>>> add_integer(20.5, -10)
	10

Test case #10: Test case between integer and infinity float

	>>> add_integer(5, 1e400)
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

Test case #11: Test case between infinity float and negative integer

	>>> add_integer(1e500, -10)
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

Non-Numbers
===========

Test case #12: Test case with the first parameter of type 'None'

	>>> add_integer(None, 10)
	Traceback (most recent call last):
	TypeError: a must be an integer

Test case #13: Test case with the second parameter of type 'None'

	>>> add_integer(20, None)
	Traceback (most recent call last):
	TypeError: b must be an integer

Test case #14: Test case with the first parameter of type 'list'

	>>> add_integer([1, 2], 10)
	Traceback (most recent call last):
	TypeError: b must be an integer

Test case #15: Test case with the second parameter of type 'str'

	>>> add_integer(1, 'This is python')
	Traceback (most recent call last):
	TypeError: b must be an integer

Return Types
============

Test case #16: Test case to check the returned integer type

	>>> type(add_integer(5, 5))
	<class 'int'>
