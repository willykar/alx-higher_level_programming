2. Division of matrix module

Import module:
==============
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided


Function:
=========
Write a function that divides all elements of a matrix


Operations:
===========
 * matrix must be a list of lists of integers or floats,
   otherwise raise a TypeError exception with the message
   'matrix must be a matrix (list of lists) of integers/floats'.

 * Each row of the matrix must be of the same size, 
   otherwise raise a TypeError exception with the message
   'Each row of the matrix must have the same size'.

 * div must be a number (integer or float), 
   otherwise raise a TypeError exception with the message
   'div must be a number'.

 * div canâ€™t be equal to 0, otherwise raise a ZeroDivisionError
   exception with the message 'division by zero'. All elements of th   e matrix should be divided by div, 
   rounded to 2 decimal places

No-Parameters
=========================

Test case #0: Test case without parameters

    >>> matrix_divided()
    Traceback (most recent call last):
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'


Section: Correct Matrix
=========================

Test case #1: Test case with integer elements and integer divider

    >>> matrix = [[1, 2, 3],[4, 5, 6]]
    >>> matrix_divided(matrix, 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Test case #2: Test case with integer and float elements and float divider

    >>> matrix = [[1.0, -2.0, -3.0],[-4.0, 5.0, -6.0]]
    >>> matrix_divided(matrix, 3.0)
    [[0.33, -0.67, -1.0], [-1.33, 1.67, -2.0]]

Test case #3: Test case with infinity elements to divide

    >>> matrix = [[1e400, 1e500, 1e600],[1e900, 1e800, 1e700]]
    >>> matrix_divided(matrix, 3)
    [[inf, inf, inf], [inf, inf, inf]]


Section: Incorrect Matrix
===========================

Test case #4: Test case with a matrix as a string

    >>> matrix = 'This is Python'
    >>> matrix_divided(matrix, 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test case #5: Test case with the rows of an inconsistent size matrix

    >>> matrix = [[11, 22, 33], 44, 55, 66]
    >>> matrix_divided(matrix, 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test case #6: Test case with lists of integers and floats within
the rows of the matrix

    >>> matrix = [[[12.0], [5], [7.0]],[[32], [89.0], [54]]]
    >>> matrix_divided(matrix, 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test case #7: Test case with strings within the rows of the matrix

    >>> matrix = [['31', '22', '43'], ['96', '47', '93']]
    >>> matrix_divided(matrix, 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test case #8: Test case with integers instead of lists in the matrix

    >>> matrix = [31, 42, 53, 64, 65, 76]
    >>> matrix_divided(matrix, 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test case #9: Test case with a string acting as a row

    >>> matrix = [[41, 52, 63], [64, 75, 96], 'Python string']
    >>> matrix_divided('matrix', 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test case #10: Test case with a matrix of empty lists
    >>> matrix = []
    >>> type(matrix_divided(matrix, 6))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test case #11: Test case with a matrix of empty lists
    >>> matrix = [[], []]
    >>> type(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats


Section: Bad Divisor
======================

Test case #12: Test case with a 'None' divider

    >>> matrix = [[41, 52, 94.0], [44, 75.5, 76]]
    >>> matrix_divided(matrix, None)
    Traceback (most recent call last):
    TypeError: div must be a number

Test case #13: Test case with a string divider

    >>> matrix = [[41, 52, 4.0], [33, 65.5, 9]]
    >>> matrix_divided(matrix, 'A Python string')
    Traceback (most recent call last):
    TypeError: div must be a number

Test case #14: Test case with a NaN divider

    >>> matrix = [[41, 52, 4.0], [245, 345.5, 76]]
    >>> matrix_divided(matrix, float('nan'))
    Traceback (most recent call last):
    TypeError: div must be a number

Test case #15: Test case with a zero as a divisor

    >>> matrix = [[90.0, 5, 137.0],[90, 19.0, 6]]
    >>> matrix_divided(matrix, 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero


Section: Inconsistent rows
======================

Test case #16: Test case with inconsistent rows

    >>> matrix = [[18, 62, 73], [64, 35]]
    >>> matrix_divided(matrix, 7)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size


Section: Types
======================

Test case #17: Test case with the type of value returned

    >>> matrix = [[41, 52, 63], [7, 8, 86]]
    >>> type(matrix_divided(matrix, 3))
    <class 'list'>
